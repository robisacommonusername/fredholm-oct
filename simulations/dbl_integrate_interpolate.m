%As for dbl_integrate, but instead of passing a function handle, we use
%a grid of points and function values specified on that grid, and interpolate
%
%Non adaptive integrator (G7-K15) Gauss-Kronrod quadrature.
%Error estimate using Gauss-Kronrod
%Shouldn't be used directly, designed as a helper function for
%dbl_integrate_adaptive. Unfortuantely due to the vagaries of Matlab/octave
%anonymous and private functions, this has to be in a separate file.
function [I,err_est] = dbl_integrate(xxf,yyf,f,xa,xb,ya,yb)
	x_g7 = [-0.949107912342759,...
			-0.741531185599394,...
			-0.405845151377397,...
			0,...
			0.405845151377397,...
			0.741531185599394,...
			0.949107912342759];
	w_g7 = [0.129484966168870,...
			0.279705391489277,...
			0.381830050505119,...
			0.417959183673469,...
			0.381830050505119,...
			0.279705391489277,...
			0.129484966168870];
	x_k15_extra = [-0.991455371120813,...
					-0.864864423359769,...
					-0.586087235467691,...
					-0.207784955007898,...
					0.207784955007898,...
					0.586087235467691,...
					0.864864423359769,...
					0.991455371120813];
	w_k15_extra = [0.022935322010529,...
					0.104790010322250,...
					0.169004726639267,...
					0.204432940075298,...
					0.204432940075298,...
					0.169004726639267,...
					0.104790010322250,...
					0.022935322010529];
	w_k15_gauss = [0.063092092629979,...
					0.140653259715525,...
					0.190350578064785,...
					0.209482141084728,...
					0.190350578064785,...
					0.140653259715525,...
					0.063092092629979];
	%transform points for rectangle [xa,xb]X[ya,yb]
	pts_g7_x = (xb-xa)/2*x_g7 + (xa+xb)/2;
	weights_g7_x = (xb-xa)/2*w_g7;
	pts_g7_y = (yb-ya)/2*x_g7 + (ya+yb)/2;
	weights_g7_y = (yb-ya)/2*w_g7;
	%Find estimate of integral by 7 point Gauss-Legendre
	[xxq,yyq] = meshgrid(pts_g7_x,pts_g7_y);
	f_g7 = interp2(xxf,yyf,f,xxq,yyq,'spline');
	G7 = weights_g7_y*f_g7*weights_g7_x';
	
	%Now find additional estimate using the Kronrod points
	pts_k15_x = (xb-xa)/2*x_k15_extra + (xa+xb)/2;
	weights_k15_extra_x = (xb-xa)/2*w_k15_extra;
	weights_k15_gauss_x = (xb-xa)/2*w_k15_gauss;
	pts_k15_y = (yb-ya)/2*x_k15_extra + (ya+yb)/2;
	weights_k15_extra_y = (yb-ya)/2*w_k15_extra;
	weights_k15_gauss_y = (yb-ya)/2*w_k15_gauss;
	K15 = weights_k15_gauss_y*f_g7*weights_k15_gauss_x';
	[xxq,yyq] = meshgrid(pts_k15_x,pts_g7_y);
	K15 = K15 + weights_k15_gauss_y*interp2(xxf,yyf,f,xxq,yyq,'spline')*weights_k15_extra_x';
	[xxq,yyq] = meshgrid(pts_k15_x,pts_k15_y);
	K15 = K15 + weights_k15_extra_y*interp2(xxf,yyf,f,xxq,yyq,'spline')*weights_k15_extra_x';
	[xxq,yyq] = meshgrid(pts_g7_x,pts_k15_y);
	K15 = K15 + weights_k15_extra_y*interp2(xxf,yyf,f,xxq,yyq,'spline')*weights_k15_gauss_x';
	
	I = K15;
	err_est = abs(K15-G7); %Todo - improve this
end
